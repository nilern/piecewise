
datatype blockItem = Clause of CST.expr vector * CST.stmt
                   | Stmt of CST.stmt

fun extractApp _ [e] = e
  | extractApp pos (f::args) = CST.App (pos, f, Vector.fromList args)
  | extractApp _ [] = raise LrParser.ParseError

fun extractBlock pos (items as (Clause _ :: _)) =
        let fun stmtSplit (Stmt stmt::items) =
                    let val (stmts', items') = stmtSplit items
                    in (stmt::stmts', items') end
              | stmtSplit items = ([], items)
            fun clauses (Clause(formals, stmt)::items) =
                    let val (stmts, items') = stmtSplit items
                    in (formals, NONE,
                        CST.Block(CST.stmtPos stmt,
                                  Vector.fromList (stmt::stmts)))
                       ::clauses items end
              | clauses [] = []
              | clauses _ = raise LrParser.ParseError
        in CST.Fn (pos, Vector.fromList (clauses items)) end
  | extractBlock pos (items as (Stmt _ :: _)) =
        let fun unwrapStmt (Stmt stmt) = stmt
              | unwrapStmt (Clause _) = raise LrParser.ParseError
        in CST.Block(pos, Vector.map unwrapStmt (Vector.fromList items)) end
  | extractBlock _ [] = raise LrParser.ParseError

fun applyNameRev pos name revExprs =
        CST.App(pos, CST.Var(pos, Var.Lex (Name.Plain name)),
                Vector.fromList (List.rev revExprs))

%%

%name Pcws

%pos Pos.t

%term ID of string

    | EQ
    | AUG
    | DARROW
    | ARROW

    | LPAREN
    | RPAREN
    | LBRACKET
    | RBRACKET
    | LBRACE
    | RBRACE

    | COMMA
    | SEMI

    | EOF

%nonterm program of CST.stmt vector
       | stmt of CST.stmt
       | expr of CST.expr
       | blockItem of blockItem

       | app of CST.expr list
       | simple of CST.expr

       | datum of CST.expr
       | compound of CST.expr

       | exprList of CST.expr list
       | exprListTwoPlus of CST.expr list
       | mapPairs of (CST.expr * CST.expr) list
       | stmtList of CST.stmt list
       | blockItemList of blockItem list

%eop EOF
%noshift EOF

%%

program : stmtList (Vector.fromList (List.rev stmtList))

stmt : expr EQ expr  (CST.Def (expr1, expr2))
     | expr AUG expr (CST.AugDef (expr1, expr2))
     | expr          (CST.Expr expr)

expr : app (extractApp appleft(List.rev app))

blockItem : app DARROW stmt (Clause (Vector.fromList (List.rev app), stmt))
          | stmt            (Stmt stmt)

app : simple     ([simple])
    | app simple (simple :: app)

simple : LPAREN expr RPAREN (expr)
       | LBRACE blockItemList RBRACE
         (extractBlock LBRACEleft (List.rev blockItemList))
       | ID    (CST.Var (IDleft, Var.Lex (Name.Plain ID)))
       | datum (datum)

datum : compound (compound)

compound : LPAREN exprList RPAREN (applyNameRev LPARENleft "tuple" exprList)
         | LBRACKET exprList RBRACKET
           (applyNameRev LBRACKETleft "array" exprList)
         | LBRACE exprList RBRACE (applyNameRev LBRACEleft "set" exprList)
         | LBRACE mapPairs RBRACE
           (let val pos = LBRACEleft
                val args = List.foldl (fn ((k, v), acc) => k::v::acc)
                                      [] mapPairs
            in CST.App(pos, CST.Var(pos, Var.Lex (Name.Plain "hashMap")),
                       Vector.fromList args) end)

exprList :                 ([])
         | expr COMMA      ([expr])
         | exprListTwoPlus (exprListTwoPlus)

exprListTwoPlus : expr COMMA expr            ([expr2, expr1])
                | exprListTwoPlus COMMA expr (expr :: exprListTwoPlus)

mapPairs : ARROW                          ([])
         | expr ARROW expr                ([(expr1, expr2)])
         | mapPairs COMMA expr ARROW expr ((expr1, expr2) :: mapPairs)

stmtList : stmt               ([stmt])
         | stmtList SEMI stmt (stmt :: stmtList)

blockItemList : blockItem                    ([blockItem])
              | blockItemList SEMI blockItem (blockItem :: blockItemList)
