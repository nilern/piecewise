use lexer::{Tok, LexicalError, SrcPos};
use ast::AST;

use std::str::FromStr;

#[LALR] grammar;

Comma<T>: Vec<T> = {
    <v: (<T> ",")*> <e: T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

CommaT<T>: Vec<T> = {
    <v: (<T> ",")+> => v,
    "," => vec![]
};

CommaPlus<T>: Vec<T> = {
    <v: (<T> ",")*> <e: T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

SemiColon<T>: Vec<T> = {
    <v: (<T> ";")*> <e: T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Exprs: AST = {
    <stmts: SemiColon<Stmt>> => AST::Block(stmts)
};

pub Expr: AST = {
    <Stmt>
};

Stmt: AST = {
    <lhs: Infix> "=" <rhs: Infix> => AST::Def(Box::new(lhs), Box::new(rhs)),
    <Infix>
};

Infix: AST = {
    <l: Infix> <op: Op> <r: App> => AST::App(Box::new(AST::Symbol(op)), vec![l, r]),
    <App>
};

App: AST = {
    <f: Simple> <args: Simple+> => AST::App(Box::new(f), args),
    <Simple>
};

Simple: AST = {
    "{" <Exprs> "}",
    "(" <Expr> ")",
    <Coll>,
    <Atom>
};

Coll: AST = {
    "(" <elems: CommaT<Expr>> ")"     => AST::Tuple(elems),
    "[" <elems: Comma<Expr>> "]"     => AST::Array(elems)//,
    //"{" <elems: CommaPlus<Expr>> "}" => AST::Set(elems),
    //"{" <kvs: Comma<MapPair>> "}"    => AST::Map(kvs)
};

Atom: AST = {
    Name => AST::Symbol(<>),
    Number => AST::Int(isize::from_str(&<>).unwrap())
};

//MapPair: (AST, AST) = {
//    <key: Expr> ":" <val: Expr> => (key, val)
//};

extern {
    type Location = SrcPos;
    type Error = LexicalError;
    enum Tok {
        Name => Tok::Name(<String>),
        Op => Tok::Op(<String>),
        Number => Tok::Number(<String>),
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "[" => Tok::LBracket,
        "]" => Tok::RBracket,
        "{" => Tok::LBrace,
        "}" => Tok::RBrace,
        "," => Tok::Comma,
        ";" => Tok::Semicolon,
        "=" => Tok::Eq
    }
}
